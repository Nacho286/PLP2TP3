Object subclass: #Direction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Direction commentStamp: '<historical>' prior: 0!Direction!!Direction methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:52'!nextFrom: puntoDeOrigen"Dado un punto, devuelve el resultado de moverse en la direccion correspondiente. "^self class nextFrom: puntoDeOrigen ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Direction class	instanceVariableNames: ''!!Direction class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:54'!nextFrom: puntoDeOrigen	^ self subclassResponsibility ! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!north	^North new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:52'!south	^South new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!northwest	^Northwest new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!east	^East new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!southeast	^Southeast new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:53'!west	^West new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!northeast	^Northeast new! !!Direction class methodsFor: 'instance-creation' stamp: 'PLP 10/9/2017 17:59'!southwest	^Southwest new! !Direction subclass: #East	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!East commentStamp: '<historical>' prior: 0!East!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!East class	instanceVariableNames: ''!!East class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:32'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y)! !Object subclass: #Elementos	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Elementos methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 18:27'!visible	^self! !!Elementos methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 18:28'!value	^self! !!Elementos methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 00:05'!isVisible	^true! !Elementos subclass: #Flag	instanceVariableNames: 'team'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Flag methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/1/2017 00:09'!team:unEquipo	team:=unEquipo ! !!Flag methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/1/2017 00:09'!team	^team! !Object subclass: #GameTeam	instanceVariableNames: 'name members'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!GameTeam methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/3/2017 00:24'!nombre:equipo con:miembros	name:=equipo.	members:=miembros.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!GameTeam class	instanceVariableNames: ''!!GameTeam class methodsFor: 'instance creation' stamp: 'IgnacioRodriguez 11/3/2017 00:23'!new:equipo with:miembros	^(self new) nombre:equipo con:miembros! !Direction subclass: #North	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!North commentStamp: '<historical>' prior: 0!North!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!North class	instanceVariableNames: ''!!North class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:33'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x)@(puntoDeOrigen y + 1)! !Direction subclass: #Northeast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Northeast commentStamp: '<historical>' prior: 0!Northeast!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Northeast class	instanceVariableNames: ''!!Northeast class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:57'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y + 1)! !Direction subclass: #Northwest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Northwest commentStamp: '<historical>' prior: 0!Northwest!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Northwest class	instanceVariableNames: ''!!Northwest class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:57'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y + 1)! !Elementos subclass: #Personajes	instanceVariableNames: 'mapa posicion equipo movilidad'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Personajes methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/2/2017 22:38'!with:map at:pos in:team	mapa:=map.	posicion:=pos.	equipo:=team.	movilidad := true.	mapa at:pos put:self.! !!Personajes methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/2/2017 22:45'!healedBy:alguien	self assert:[alguien canHeal].	movilidad:=true.! !!Personajes methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/1/2017 23:54'!selectSeenFrom:unaCol	^unaCol select:[:x|x isVisible ].! !!Personajes methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 23:26'!canHeal	^false.! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:13'!moveTo: aDirection	| content |	(self canMoveTo: aDirection) ifFalse: [ ^self].	mapa remove: self.	posicion  := aDirection nextFrom: posicion .	content := mapa at: posicion .	mapa at: posicion  put: self.	content ifNil: [self interactWithAllElements] ifNotNil: [ self disable ].	^self! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:17'!move:pasos to: aDirection	|auxPasos|	auxPasos :=pasos.	[ auxPasos >0 & (self canMoveTo: aDirection )] whileTrue: [ self moveTo: aDirection.																			auxPasos:=auxPasos-1. ]! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/2/2017 23:36'!canMoveTo: unaDireccion	|proxPos|	proxPos:= unaDireccion nextFrom: posicion.	^ self canMove & (mapa posicionValida: proxPos ) and: [  (mapa at:proxPos) value isNil].! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:18'!location	^posicion  ! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/2/2017 22:39'!canMove	^movilidad ! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/1/2017 23:30'!team	^equipo! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:09'!interactWithAllElements	|elementos|	elementos :=self selectSeenFrom: (mapa elementsAround: self).	elementos := elementos select:(self target) thenDo:(self action).! !!Personajes methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/2/2017 22:39'!disable	movilidad :=false.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Personajes class	instanceVariableNames: ''!!Personajes class methodsFor: 'instance creation' stamp: 'IgnacioRodriguez 11/1/2017 23:28'!new:mapa with:posicion and:equipo	^(self new) with:mapa at:posicion in:equipo! !Personajes subclass: #Engineer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Engineer methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/1/2017 23:56'!selectSeenFrom:unaCol	^unaCol.! !!Engineer methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/2/2017 23:50'!target	^[:x|x isKindOf: Trap]! !!Engineer methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:03'!action	^[:x|mapa remove: x]! !Personajes subclass: #Explorer	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Explorer methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/2/2017 23:50'!target	^[:x|x isKindOf: Flag]! !!Explorer methodsFor: 'accessing' stamp: 'IgnacioRodriguez 11/3/2017 00:03'!action	^[:x|x team: equipo]! !Personajes subclass: #Medic	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Medic methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/2/2017 22:48'!canHeal	^movilidad .! !!Medic methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/2/2017 23:53'!target	^[:x|(x isKindOf: Personajes)  and:[ (x canMove) not & (equipo == (x team))]]! !!Medic methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/3/2017 00:04'!action	^[:x|x healedBy: self]! !Direction subclass: #South	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!South commentStamp: '<historical>' prior: 0!South!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!South class	instanceVariableNames: ''!!South class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:33'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x)@(puntoDeOrigen y - 1)! !Direction subclass: #Southeast	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Southeast commentStamp: '<historical>' prior: 0!Southeast!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Southeast class	instanceVariableNames: ''!!Southeast class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:58'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x + 1)@(puntoDeOrigen y - 1)! !Direction subclass: #Southwest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Southwest commentStamp: '<historical>' prior: 0!Southwest!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Southwest class	instanceVariableNames: ''!!Southwest class methodsFor: 'evaluating' stamp: 'PLP 10/9/2017 17:58'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y - 1)! !Object subclass: #Terrain	instanceVariableNames: 'mapa'	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/1/2017 00:29'!at:unPunto put:unElemento	mapa at: (unPunto x) at:(unPunto y) put:unElemento ! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/2/2017 23:16'!elementosValidos:unPersonaje	|listaElementos listaPuntos posicion|		posicion := mapa indexOf: unPersonaje.		listaPuntos := posicion eightNeighbors select:[:p|self posicionValida: p].		^listaElementos:= listaPuntos select: [:p| (self at:p)notNil ] thenCollect:[:x|self at:x].		! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/2/2017 21:05'!remove:unElemento	|unPunto|	unPunto:=	mapa indexOf: unElemento  ifAbsent:[^self]. 	mapa at:(unPunto x) at:(unPunto y) put:nil.! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/1/2017 00:43'!visibleAt: unPunto	^(mapa at:(unPunto x) at:(unPunto y)) value.! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/1/2017 00:32'!at:unPunto 	^mapa at: (unPunto x) at:(unPunto y).! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/1/2017 00:27'!contains:unPunto	^ (unPunto x>0) & (unPunto y>0) & (unPunto x <= mapa numberOfRows) & (unPunto y <= mapa numberOfColumns )  ! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/2/2017 22:36'!elementsAround:unPersonaje satisfying:unBloque	|listaElementos|		listaElementos:= self elementsAround:unPersonaje .		^ listaElementos select: unBloque .		! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/1/2017 00:23'!initialize:unaMatriz	mapa:=unaMatriz ! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/2/2017 22:30'!elementsAround:unPersonaje	|listaElementos |		listaElementos:= self elementosValidos: unPersonaje .		^ unPersonaje selectSeenFrom: listaElementos.		! !!Terrain methodsFor: 'initialization' stamp: 'IR 11/2/2017 19:31'!select:unBloque	^(mapa asOrderedCollection) select:[:x|x ifNil:[false] ifNotNil: [unBloque value:x]].! !!Terrain methodsFor: 'initialization' stamp: 'IgnacioRodriguez 11/2/2017 23:12'!posicionValida:unPunto		^(unPunto x>0) & (unPunto y>0) &( unPunto x<=(mapa numberOfRows)) & (unPunto y<=(mapa numberOfColumns))! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Terrain class	instanceVariableNames: ''!!Terrain class methodsFor: 'as yet unclassified' stamp: 'IgnacioRodriguez 11/1/2017 00:22'!dimX: x dimY: y	^ self new initialize: (Matrix rows:x columns:y).! !TestCase subclass: #TestsEx1	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:26'!test1_2_visibilityAndValue	| flag trap |	flag := Flag new.	trap := Trap new.	self assert: (flag isVisible).	self assert: (trap isVisible not).	self assert: (flag value) equals: flag.	self assert: (trap value isNil).! !!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/15/2017 05:52'!test1_3_flagTeams	| flag1 flag2 flag3 |	flag1 := Flag new.	flag2 := Flag new team: #azul; yourself.	flag3 := Flag new.		self assert: flag1 team isNil.	flag1 team: #azul.	self assert: flag1 team isNil not.	flag3 team: #rojo.	self assert: flag1 team equals: flag2 team.	self assert: flag3 team equals: #rojo.	flag2 team: flag3 team.	self assert: flag2 team equals: #rojo.	! !!TestsEx1 methodsFor: 'testing' stamp: 'PLP 10/12/2017 11:54'!test1_1_canCreateTrapsAndFlags	self assert: (Flag new isKindOf: Flag).	self assert: (Trap new isKindOf: Trap).! !TestCase subclass: #TestsEx2	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:48'!test2_2_gameElementsInTerrain	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	self assert: ((terrain at: (2@3)) isNil).	self assert: ((terrain at: (2@1)) isNotNil).	self assert: ((terrain visibleAt: (2@1)) isNotNil).	self assert: ((terrain at: (3@1)) isNotNil).	self assert: ((terrain visibleAt: (3@1)) isNil).	self assert: ((terrain at: (5@4)) isVisible not).	self assert: ((terrain at: (4@4)) team isNil).! !!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:58'!test2_3_select	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	self assert: ((terrain select: [:x| x isNotNil]) size) equals: 6.	self assert: ((terrain select: [:x| x isVisible]) size) equals: 3.! !!TestsEx2 methodsFor: 'testing' stamp: 'PLP 10/12/2017 14:37'!test2_1_pointsInTerrain	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	self assert: (terrain contains: (1@1)).	self assert: (terrain contains: (5@2)).	self assert: (terrain contains: (5@4)).	self assert: (terrain contains: (4@5)) not.	self assert: (terrain contains: (2@7)) not.	self assert: (terrain contains: (0@1)) not.! !!TestsEx2 methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/2/2017 20:35'!test2_4_remove	"Verifica la presencia o ausencia de puntos en el terreno"	| terrain flag |	terrain := Terrain dimX: 5 dimY: 4.	flag := Flag new.	terrain at: (2@1) put: flag; at: (2@2) put: Flag new; at: (4@4) put: Flag new.	self assert: (terrain at: (2@1)) isNotNil.		terrain remove: flag.		self assert: (terrain at: (2@1)) isNil.	self assert: (terrain at: (2@2)) isNotNil.	self assert: (terrain at: (2@4)) isNil.	self assert: (terrain at: (4@4)) isNotNil.		terrain remove: flag.	self assert: (terrain at: (2@1)) isNil.	self assert: (terrain at: (2@2)) isNotNil.	self assert: (terrain at: (2@4)) isNil.	self assert: (terrain at: (4@4)) isNotNil.	! !TestCase subclass: #TestsEx3	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx3 methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/2/2017 21:16'!test3_4_elementsAroundSatisfying	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.		self assert: (terrain elementsAround: dora satisfying: [:x | x isVisible]) size equals: 2.	self assert: (terrain elementsAround: bob satisfying: [:x | x isVisible]) size equals: 2.		doc := Medic new: terrain with: (1@1) and: #verde.		self assert: (terrain elementsAround: doc satisfying: [:x | x ~= 0]) size equals: 2.	self assert: (terrain elementsAround: bob satisfying: [:x | x ~= #verde]) size equals: 4.	self assert: (terrain elementsAround: bob satisfying: [:x | x respondsTo: #team]) size equals: 3.	self assert: (terrain elementsAround: doc satisfying: [:x | x == bob]) size equals: 1.! !!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/12/2017 15:29'!test3_2_selectSeen	"Esto testea el mensaje selectSeenFrom:, que dada una colección filtra los elementos que el receptor puede ver."	| terrain bob dora doc col |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		col := OrderedCollection with: Flag new with: dora with: Trap new with: bob with: Trap new with: doc.		self assert: (dora selectSeenFrom: col) size equals: 4.	self assert: (bob selectSeenFrom: col) size equals: 6.	self assert: (doc selectSeenFrom: col) size equals: 4.	self assert: ((bob selectSeenFrom: col) anySatisfy: [:x | x isVisible not]).	self assert: ((doc selectSeenFrom: col) allSatisfy: [:x | x isVisible]).! !!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/13/2017 09:16'!test3_1_gameCharacterCreation	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		self assert: dora team equals: bob team.	self assert: doc team equals: #verde.	self assert: (terrain at: (1@2)) equals: bob.	self should: [ Explorer new: terrain with: (2@5) and: #verde ] raise: Exception.	self assert: dora canHeal not.	self assert: bob canHeal not.	self assert: doc canHeal.! !!TestsEx3 methodsFor: 'testing' stamp: 'PLP 10/12/2017 15:50'!test3_3_elementsAround	"El mensaje elementsAround: debe devolver, dado un personaje, la colección de elementos adyacentes 	al personaje que este puede ver. Recordar que solo los ingenieros pueden ver las trampas."	| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (1@2) and: #verde.	doc := Medic new: terrain with: (4@2) and: #verde.		self assert: (terrain elementsAround: dora) size equals: 2.	self assert: (terrain elementsAround: doc) size equals: 1.	self assert: (terrain elementsAround: bob) size equals: 3.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx3 class	instanceVariableNames: ''!!TestsEx3 class methodsFor: 'initializing' stamp: 'PLP 10/12/2017 15:06'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (2@1) put: Flag new; at: (3@2) put: Flag new; at: (4@4) put: Flag new.	terrain at: (2@2) put: Trap new; at: (3@1) put: Trap new; at: (5@4) put: Trap new.	^terrain	! !TestCase subclass: #TestsEx4	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 10:38'!test4_5_interactWithAllElements| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (3@2) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		dora disable.		self assert: ((terrain at: (3@3)) isKindOf: Trap).	self assert: ((terrain at: (4@2)) isKindOf: Trap).	self assert: (terrain at: (2@2)) team isNil.	self assert: dora canMove not.		bob interactWithAllElements.	doc interactWithAllElements.	dora interactWithAllElements.		self assert: (terrain at: (3@3)) isNil.	self assert: (terrain at: (4@2)) isNil.	self assert: (terrain at: (2@2)) team equals: #verde.	self assert: dora canMove.	! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/15/2017 01:20'!test4_3_targets"Cada personaje tiene su objetivo. El mensaje target debe devolver un bloque que,dado un objeto, indique si este es un objetivo para el personaje receptor."| terrain bob dora doc dean |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	dean := Explorer new: terrain with: (2@4) and: #rojo.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		dora disable.	dean disable.		self assert: (dora target value: Flag new).	self assert: (dora target value: Trap new) not.	self assert: (doc target value: dora).	self assert: (doc target value: bob) not.	self assert: (doc target value: dean) not.	self assert: (doc target value: Trap new) not.	self assert: (bob target value: Trap new).	self assert: (bob target value: Flag new) not.! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 10:30'!test4_4_actions| terrain bob dora doc flag trap |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.	flag := terrain at: (2@2).	trap := terrain at: (1@2).		dora disable.		self assert: (trap isKindOf: Trap).	self assert: flag team isNil.	self assert: dora canMove not.		bob action value: trap.	doc action value: dora.	dora action value: flag.		self assert: (terrain at: (1@2)) isNil.	self assert: flag team equals: #verde.	self assert: dora canMove.	! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/15/2017 02:04'!test4_6_moving	"moveTo: mueve el personaje un paso en la dirección indicada, si es posible.	move:to: mueve el personaje una cantidad dada de pasos en la dirección indicada, mientras sea posible."	| terrain bob dora doc dean |	terrain := self class terrain.	dora := Explorer new: terrain with: 2 @ 3 and: #verde.	dean := Explorer new: terrain with: 2 @ 4 and: #rojo.	bob := Engineer new: terrain with: 2 @ 1 and: #verde.	doc := Medic new: terrain with: 3 @ 4 and: #verde.		self assert: ((terrain at: 3 @ 3) isKindOf: Trap).	self assert: (dean canMoveTo: Direction southeast).		dora moveTo: Direction east.		self assert: dora location equals: 3 @ 3.	self assert: (terrain at: 3 @ 3) equals: dora.	self assert: dora canMove not.	dora moveTo: Direction south.	self assert: dora location equals: 3 @ 3.	self assert: (dean canMoveTo: Direction southeast) not.	"No se puede mover hacia el sudeste porque está Dora."		dean moveTo: Direction southeast.		self assert: dean location equals: 2 @ 4.		doc moveTo: Direction east.		self assert: dora canMove.	"Doc la curó al pasar a su lado."			dean moveTo: Direction south.		self assert: dean location equals: 2 @ 3.	self assert: (terrain at: 4 @ 3) team isNil.	self assert: (terrain at: 2 @ 2) team equals: #rojo.		dora moveTo: Direction south.	self assert: dora location equals: 3 @ 2.	self assert: (terrain at: 4 @ 3) team equals: #verde.	self assert: (terrain at: 2 @ 2) team equals: #verde.		dean moveTo: Direction west.		self assert: (terrain at: 4 @ 3) team equals: #verde.	self assert: (terrain at: 2 @ 2) team equals: #rojo.	self assert: ((terrain at: 4 @ 2) isKindOf: Trap).		bob move: 3 to: Direction east.		self assert: bob location equals: 4 @ 1.	"Se movió 2 lugares y se chocó con la bandera."	self assert: ((terrain at: 4 @ 2) isNil).! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 09:51'!test4_2_directions| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		self assert: (bob canMoveTo: Direction northeast).	self assert: (doc canMoveTo: Direction west).	self assert: (dora canMoveTo: Direction east).	self assert: (dora canMoveTo: Direction south) not.	self assert: (dora canMoveTo: Direction northeast) not.	self assert: (doc canMoveTo: Direction north) not.		bob disable.		self assert: (bob canMoveTo: Direction northeast) not.! !!TestsEx4 methodsFor: 'testing' stamp: 'PLP 10/13/2017 09:37'!test4_1_mobility| terrain bob dora doc |	terrain := self class terrain.	dora := Explorer new: terrain with: (2@3) and: #verde.	bob := Engineer new: terrain with: (2@1) and: #verde.	doc := Medic new: terrain with: (3@4) and: #verde.		self assert: bob canMove.	self assert: doc canMove.	self assert: dora canMove.		dora disable.		self assert: dora canMove not.	self should: [ dora healedBy: bob ] raise: Exception.	self assert: dora canMove not.	self assert: doc canHeal.		dora healedBy: doc.		self assert: dora canMove.		doc disable.		self assert: doc canHeal not.	self assert: doc canMove not.	self should: [ doc healedBy: doc ] raise: Exception.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx4 class	instanceVariableNames: ''!!TestsEx4 class methodsFor: 'initializing' stamp: 'PLP 10/13/2017 09:22'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (5@1) put: Flag new; at: (2@2) put: Flag new; at: (4@3) put: Flag new.	terrain at: (1@2) put: Trap new; at: (4@2) put: Trap new; at: (3@3) put: Trap new.	^terrain! !TestCase subclass: #TestsEx5	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!TestsEx5 methodsFor: 'testing' stamp: 'PLP 10/15/2017 09:50'!test5_3_game	"Ya se puede empezar a jugar.	El mensaje moveCharacter:to:steps: mueve el iésimo personaje del equipo actual una cierta cantidad 	de pasos en la dirección indicada."	| game trapLocations flagLocations |	flagLocations := OrderedCollection with: (5@1) with: (2@2) with: (4@3).	trapLocations := OrderedCollection with: (1@2) with: (4@2) with: (3@3).		game := Game newX: 5 Y: 4 trapLocations: trapLocations flagLocations: flagLocations.	game registerTeam: #verde playerLocations: {(2@3) . Explorer . (3@4) . Medic}.	game registerTeam: #rojo  playerLocations: {(2@4) . Explorer . (2@1) . Engineer}.	self assert: game currentTeam name equals: #verde.	game pass.	self assert: game currentTeam name equals: #rojo.	game pass.	self assert: game currentTeam name equals: #verde.	game moveCharacter: 1 to:  Direction east steps: 1.	self assert: game currentWinners isEmpty.	self assert: game currentTeam name equals: #rojo.	game moveCharacter: 1 to:  Direction south steps: 1.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #verde.	game moveCharacter: 2 to:  Direction east steps: 1.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #rojo.	game moveCharacter: 2 to:  Direction east steps: 3.	self assert: (game currentWinners includes: #rojo).		self assert: game currentTeam name equals: #verde.	game moveCharacter: 1 to:  Direction south steps: 1.	self assert: (game currentWinners includes: #rojo) not.	self assert: (game currentWinners includes: #verde).	self assert: game currentTeam name equals: #rojo.	game moveCharacter: 1 to:  Direction west steps: 1.	self assert: (game currentWinners includes: #rojo).	self assert: (game currentWinners includes: #verde).	! !!TestsEx5 methodsFor: 'testing' stamp: 'PLP 10/15/2017 05:30'!test5_1_gameTeam	| terrain dora doc greenTeam|	terrain := self class terrain.	dora := Explorer new: terrain with: 2@3 and: #verde.	doc := Medic new: terrain with: 3@4 and: #verde.		greenTeam := GameTeam new: #verde with: (OrderedCollection with: dora with: doc).	self assert: greenTeam members size equals: 2.	self assert: (greenTeam members includes: dora).	self assert: greenTeam name equals: #verde.! !!TestsEx5 methodsFor: 'testing' stamp: 'PLP 10/15/2017 05:31'!test5_2_registerTeam	| game trapLocations flagLocations playerLocations|	flagLocations := OrderedCollection with: (5@1) with: (2@2) with: (4@3).	trapLocations := OrderedCollection with: (1@2) with: (4@2) with: (3@3).		game := Game newX: 5 Y: 4 trapLocations: trapLocations flagLocations: flagLocations.	playerLocations := {(2@3). Explorer. (3@4). Medic}.		game registerTeam: #verde playerLocations: playerLocations.	self assert: game currentTeam members size equals: 2.	self assert: game currentTeam name equals: #verde.	self assert: (game currentTeam members first isKindOf: Explorer).	self assert: ((game currentTeam members at: 2) isKindOf: Medic).	self assert: (game currentTeam members at: 2) team equals: (game currentTeam name).! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TestsEx5 class	instanceVariableNames: ''!!TestsEx5 class methodsFor: 'initializing' stamp: 'PLP 10/15/2017 02:32'!terrain	| terrain |	terrain := Terrain dimX: 5 dimY: 4.	terrain at: (5@1) put: Flag new; at: (2@2) put: Flag new; at: (4@3) put: Flag new.	terrain at: (1@2) put: Trap new; at: (4@2) put: Trap new; at: (3@3) put: Trap new.	^terrain! !Elementos subclass: #Trap	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!Trap methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 18:28'!visible	^nil! !!Trap methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 18:29'!value	^nil! !!Trap methodsFor: 'testing' stamp: 'IgnacioRodriguez 11/1/2017 00:06'!isVisible	^false! !Direction subclass: #West	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLP'!!West commentStamp: '<historical>' prior: 0!West!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!West class	instanceVariableNames: ''!!West class methodsFor: 'evaluating' stamp: 'PLP 10/14/2017 23:34'!nextFrom: puntoDeOrigen	^(puntoDeOrigen x - 1)@(puntoDeOrigen y)! !